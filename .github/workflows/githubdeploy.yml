name: Terraform AKS Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        type: choice
        default: d
        options:
          - d
          - t
          - a
          - p

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: vpps-${{ github.event.inputs.environment }}

    env:
      # propagate the selected environment
      ENV: ${{ github.event.inputs.environment }}

      # Terraform variables via TF_VAR_ so terraform sees them
      TF_VAR_subscription_id: ${{ vars.SUBSCRIPTION_ID }}
      TF_VAR_resource_group_name: ${{ vars.RESOURCE_GROUP_NAME }}
      TF_VAR_location: ${{ vars.LOCATION }}
      TF_VAR_aks_cluster_name: mmt-aks-${{ github.event.inputs.environment }}
      TF_VAR_node_vm_size: ${{ vars.NODE_VM_SIZE }}
      TF_VAR_node_pool_min_count: ${{ vars.NODE_POOL_MIN_COUNT }}
      TF_VAR_node_pool_max_count: ${{ vars.NODE_POOL_MAX_COUNT }}
      TF_VAR_k8s_version: ${{ vars.K8S_VERSION }}
      TF_VAR_subnet_id: ${{ vars.SUBNET_ID }}
      TF_VAR_acr_name: ${{ vars.ACR_NAME }}
      TF_VAR_windows_admin_username: ${{ vars.WINDOWS_ADMIN_USERNAME }}
      # password from secret (sensitive)
      TF_VAR_windows_admin_password: ${{ secrets.WINDOWS_ADMIN_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Azure login via OIDC
        uses: azure/login@v1
        with:
          subscription-id: ${{ vars.SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-id: ${{ vars.AZURE_CLIENT_ID }}  # assumes federated credential is configured

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.event_name == 'workflow_dispatch'
        working-directory: terraform
        run: terraform apply -input=false -auto-approve tfplan
